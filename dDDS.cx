#package ::dDDS

// Module
class Module : core/package, hidden

// Primitive types
binary Octet: Width_8
character Char{}
uint UShort: Width_16
uint ULong: Width_32
int Short: Width_16
int Long: Width_32
float Float: Width_32
float Double: Width_64
text String{}

// Enum type
class Enum : lang/enum

// Struct type
class Struct : lang/struct, hidden ::
    string metaXml()

class Member : lang/member, hidden ::
    alias type: lang/member/type
    key: int32, hidden
    void setKey(int32 id)

// Collections
class Array : lang/array
class Sequence : lang/sequence

// Generic reference for samples
type Object: lang/typeKind/VOID, true ::
    dDDS/Object new(dDDS/Struct type, string json)
    void set(dDDS/Object sample, string json)
    dDDS/String json(dDDS/Object sample)

// Wrappers to hide Corto functions
void @delete()

// DomainParticipant
class DomainParticipant::
    id: int32
    int16 construct()
    void destruct()

// Dynamic Topic
class Topic::
    type: dDDS/Struct
    int16 construct()
    void destruct()

// Dynamic Publisher
class Publisher::
    partitions: dDDS/Sequence{dDDS/String}
    int16 construct()
    void destruct()

// Dynamic Subscriber
class Subscriber::
    partitions: dDDS/Sequence{dDDS/String}
    int16 construct()
    void destruct()

// Dynamic Writer
class DataWriter::
    member topic: dDDS/Topic
    int16 construct()
    void destruct()
    int16 write(object sample)

dDDS/Sequence ObjectSeq: dDDS/Object

// Dynamic Reader
class DataReader::
    member topic: dDDS/Topic
    int16 construct()
    void destruct()
    int16 read(dDDS/ObjectSeq& sampleSeq)
